import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np
import time
import json
from datetime import datetime
import sys
import os
import re

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Plataforma de An√°lisis de Seguridad",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Importar agente Claude (REAL)
try:
    import anthropic
    ANTHROPIC_AVAILABLE = True
except ImportError:
    ANTHROPIC_AVAILABLE = False
    st.error("Anthropic no instalado. Instalar con: pip install anthropic")

# CSS profesional minimalista
def load_css():
    st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    .main > div {
        font-family: 'Inter', sans-serif;
    }
    
    .main-header {
        background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
        padding: 2rem;
        border-radius: 8px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .email-container {
        background: white;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        padding: 1.5rem;
        margin: 1rem 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        line-height: 1.6;
    }
    
    .email-header {
        padding: 1rem;
        background: #f8fafc;
        border-radius: 6px;
        margin-bottom: 1rem;
        border-left: 4px solid #3b82f6;
    }
    
    .status-card {
        padding: 1rem;
        border-radius: 6px;
        margin: 1rem 0;
        border-left: 4px solid;
    }
    
    .status-success { border-left-color: #059669; background: #f0fdf4; }
    .status-warning { border-left-color: #d97706; background: #fffbeb; }
    .status-error { border-left-color: #dc2626; background: #fef2f2; }
    
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    .stDeployButton {display: none;}
    header {visibility: hidden;}
    </style>
    """, unsafe_allow_html=True)

def main():
    load_css()
    
    # Inicializar estado de la sesi√≥n
    if 'demo_mode' not in st.session_state:
        st.session_state.demo_mode = False
    if 'completed_analyses' not in st.session_state:
        st.session_state.completed_analyses = []
    if 'user_profiles' not in st.session_state:
        st.session_state.user_profiles = []
    if 'generated_content' not in st.session_state:
        st.session_state.generated_content = []
    
    # Header principal
    st.markdown("""
    <div class="main-header">
        <h1>Sistema de An√°lisis de Vulnerabilidades</h1>
        <p>Plataforma Profesional de Evaluaci√≥n de Seguridad</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Configurar agente de IA
    setup_ai_agent()
    
    # Men√∫ principal
    tab1, tab2, tab3, tab4 = st.tabs([
        "Panel Principal",
        "An√°lisis OSINT", 
        "Perfilado de Usuario",
        "Generaci√≥n de Contenido"
    ])
    
    with tab1:
        show_dashboard()
    
    with tab2:
        osint_analysis()
    
    with tab3:
        user_profiling()
    
    with tab4:
        content_generation()
    
    # Footer con informaci√≥n adicional
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #6b7280; font-size: 0.9rem; padding: 1rem;">
        <p><strong>Sistema de An√°lisis de Vulnerabilidades</strong> - Plataforma educativa para evaluaci√≥n de seguridad</p>
        <p>‚ö†Ô∏è <strong>Uso √âtico:</strong> Esta herramienta debe usarse √∫nicamente para fines educativos y de concientizaci√≥n sobre seguridad.</p>
    </div>
    """, unsafe_allow_html=True)

def setup_ai_agent():
    """Configurar agente de IA REAL"""
    
    with st.sidebar:
        st.markdown("### Configuraci√≥n del Sistema")
        
        if not ANTHROPIC_AVAILABLE:
            st.error("**Anthropic SDK no instalado**")
            st.code("pip install anthropic", language="bash")
            return
        
        # Input para API key
        st.markdown("**Obtener API Key:**")
        st.markdown("1. Ir a [console.anthropic.com](https://console.anthropic.com)")
        st.markdown("2. Crear cuenta / Iniciar sesi√≥n")
        st.markdown("3. Ir a 'API Keys' y crear nueva clave")
        
        api_key = st.text_input(
            "Clave API de Anthropic", 
            type="password",
            placeholder="sk-ant-api-key...",
            help="Debe empezar con 'sk-ant-'",
            key="anthropic_api_key_input"
        )
        
        # Separar botones del input
        col1, col2 = st.columns(2)
        
        with col1:
            demo_button = st.button("üß™ Modo Demo", key="demo_mode_button", help="Usar datos de ejemplo")
        
        with col2:
            if api_key:
                test_button = st.button("üîß Probar API", key="test_connection_button", help="Probar conexi√≥n")
            else:
                test_button = False
        
        if demo_button:
            st.session_state.demo_mode = True
            st.success("‚úÖ Modo demo activado - usando datos de ejemplo")
        
        if api_key and test_button:
            test_anthropic_connection(api_key)
        elif api_key:
            setup_anthropic_client(api_key)
        
        display_system_info()

def test_anthropic_connection(api_key):
    """Probar conexi√≥n con Anthropic"""
    if not api_key.startswith('sk-ant-'):
        st.error("‚ùå Formato de API key incorrecto. Debe empezar con 'sk-ant-'")
        return
    
    try:
        with st.spinner("Probando conexi√≥n..."):
            client = anthropic.Anthropic(api_key=api_key)
            response = client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=20,
                messages=[{"role": "user", "content": "Responde solo: 'Conexi√≥n exitosa'"}]
            )
            st.session_state.anthropic_client = client
            st.session_state.claude_model = "claude-3-5-sonnet-20241022"
            st.session_state.demo_mode = False
            st.success(f"‚úÖ {response.content[0].text}")
    except Exception as e:
        error_msg = str(e).lower()
        if "not_found" in error_msg or "404" in error_msg:
            try_fallback_models(api_key)
        else:
            st.error(f"‚ùå Error de conexi√≥n: {str(e)}")

def try_fallback_models(api_key):
    """Intentar modelos de respaldo"""
    models = [
        "claude-3-5-haiku-20241022",
        "claude-3-opus-20240229",
        "claude-3-sonnet-20240229"
    ]
    
    for model in models:
        try:
            client = anthropic.Anthropic(api_key=api_key)
            response = client.messages.create(
                model=model,
                max_tokens=20,
                messages=[{"role": "user", "content": "test"}]
            )
            st.session_state.anthropic_client = client
            st.session_state.claude_model = model
            st.session_state.demo_mode = False
            st.success(f"‚úÖ Conectado con {model}")
            return
        except Exception:
            continue
    
    st.error("‚ùå No se pudo conectar con ning√∫n modelo disponible")

def setup_anthropic_client(api_key):
    """Configurar cliente sin probar inmediatamente"""
    if api_key.startswith('sk-ant-'):
        try:
            client = anthropic.Anthropic(api_key=api_key)
            st.session_state.anthropic_client = client
            st.session_state.claude_model = "claude-3-5-sonnet-20241022"
            st.session_state.demo_mode = False
            st.info("üîë API Key configurada. Use 'Probar API' para verificar.")
        except Exception as e:
            st.error(f"‚ùå Error configurando cliente: {str(e)}")

def display_system_info():
    """Mostrar informaci√≥n del sistema"""
    st.markdown("---")
    
    if st.session_state.get('demo_mode'):
        st.markdown("### üß™ Modo Demo Activo")
        st.info("Usando datos de ejemplo predefinidos")
    elif 'anthropic_client' in st.session_state:
        st.markdown("### ‚úÖ Sistema Conectado")
        st.info(f"Modelo: {st.session_state.get('claude_model', 'N/A')}")
    else:
        st.markdown("### ‚ö†Ô∏è Sistema No Configurado")
        st.warning("Configure API key o use modo demo")
    
    # Bot√≥n para limpiar cach√© fuera del form
    if st.button("üßπ Limpiar Cach√©", key="clear_cache_main"):
        clear_session_cache()
        st.success("‚úÖ Cach√© limpiado")

def clear_session_cache():
    """Limpiar cach√© de sesi√≥n"""
    keys_to_clear = ['current_osint', 'current_profile', 'current_content']
    for key in keys_to_clear:
        if key in st.session_state:
            del st.session_state[key]

def show_dashboard():
    """Panel principal del sistema"""
    
    if not ('anthropic_client' in st.session_state or st.session_state.get('demo_mode')):
        show_setup_instructions()
        return
    
    if st.session_state.get('demo_mode'):
        st.info("üß™ **MODO DEMO ACTIVADO** - Usando datos de ejemplo predefinidos")
    
    st.markdown("### An√°lisis Activos")
    
    # M√©tricas reales basadas en datos del sistema
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        analysis_count = len(st.session_state.get('completed_analyses', []))
        st.metric("An√°lisis Completados", analysis_count)
    
    with col2:
        profile_count = len(st.session_state.get('user_profiles', []))
        st.metric("Usuarios Perfilados", profile_count)
    
    with col3:
        content_count = len(st.session_state.get('generated_content', []))
        st.metric("Contenido Generado", content_count)
    
    with col4:
        system_status = "DEMO" if st.session_state.get('demo_mode') else "AI-Powered"
        st.metric("Estado del Sistema", system_status)
    
    # Historial de an√°lisis
    display_recent_analyses()
    
    # Bot√≥n para cargar datos demo fuera de cualquier form
    if st.session_state.get('demo_mode'):
        st.markdown("### üéØ Datos de Ejemplo")
        if st.button("üìä Cargar An√°lisis de Ejemplo", key="load_demo_dashboard"):
            load_demo_data()
            st.success("‚úÖ Datos de ejemplo cargados")
            st.experimental_rerun()

def show_setup_instructions():
    """Mostrar instrucciones de configuraci√≥n"""
    st.warning("**Configure la API de Anthropic o use el Modo Demo para acceder a todas las funcionalidades**")
    
    st.markdown("""
    **Para usar este sistema necesitas:**
    
    1. **Cuenta en Anthropic Console**: [console.anthropic.com](https://console.anthropic.com)
    2. **API Key de Anthropic**: Genera una clave en la consola  
    3. **Cr√©ditos disponibles**: $5 gratis para cuentas nuevas
    
    **üí° Tip**: Usa el bot√≥n **"üß™ Modo Demo"** en el sidebar para probar la interfaz sin API key.
    """)

def display_recent_analyses():
    """Mostrar an√°lisis recientes"""
    if st.session_state.get('completed_analyses'):
        st.markdown("### An√°lisis Recientes")
        for analysis in st.session_state.completed_analyses[-3:]:
            with st.expander(f"{analysis['type']} - {analysis['timestamp']}", expanded=False):
                if isinstance(analysis['summary'], dict):
                    st.json(analysis['summary'])
                else:
                    st.write(analysis['summary'])

def safe_json_parse(content):
    """Parsear JSON de manera segura y robusta"""
    try:
        # Limpiar contenido
        content = content.strip()
        
        # Remover markdown
        content = re.sub(r'```json\s*', '', content)
        content = re.sub(r'```\s*$', '', content)
        
        # Buscar JSON entre llaves
        json_match = re.search(r'\{.*\}', content, re.DOTALL)
        if json_match:
            json_str = json_match.group(0)
            
            # Reemplazar saltos de l√≠nea problem√°ticos
            json_str = re.sub(r'\\n', '\\\\n', json_str)
            json_str = re.sub(r'(?<!\\)"([^"]*\n[^"]*)"', r'"\1"', json_str)
            
            return json.loads(json_str)
        
        return None
        
    except json.JSONDecodeError as e:
        st.warning(f"Error JSON: {e}")
        return None
    except Exception as e:
        st.warning(f"Error parsing: {e}")
        return None

def osint_analysis():
    """An√°lisis OSINT real mejorado"""
    st.markdown("### An√°lisis de Inteligencia de Fuentes Abiertas")
    
    if not ('anthropic_client' in st.session_state or st.session_state.get('demo_mode')):
        st.error("**Requiere conexi√≥n con Anthropic Claude o modo demo para an√°lisis OSINT**")
        return
    
    with st.form("osint_form", clear_on_submit=False):
        st.markdown("**Informaci√≥n del Objetivo**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            company_name = st.text_input("Nombre de la Organizaci√≥n*", key="osint_company")
            domain = st.text_input("Dominio Web*", key="osint_domain")
            
        with col2:
            industry = st.selectbox("Industria", [
                "Tecnolog√≠a", "Finanzas", "Salud", "Educaci√≥n", 
                "Retail", "Manufactura", "Consultor√≠a", "Gobierno"
            ], key="osint_industry")
            
            company_size = st.selectbox("Tama√±o de Empresa", [
                "1-50", "51-200", "201-1000", "1000-5000", "5000+"
            ], key="osint_size")
        
        employee_info = st.text_area(
            "Informaci√≥n de Empleados Clave",
            placeholder="Nombres, roles, informaci√≥n p√∫blica de empleados relevantes...",
            key="osint_employees"
        )
        
        tech_stack = st.text_area(
            "Stack Tecnol√≥gico Conocido",
            placeholder="Tecnolog√≠as, herramientas, servicios que utiliza la empresa...",
            key="osint_tech"
        )
        
        additional_info = st.text_area(
            "Informaci√≥n Adicional",
            placeholder="Redes sociales, noticias recientes, proyectos p√∫blicos...",
            key="osint_additional"
        )
        
        submitted = st.form_submit_button("üîç Iniciar An√°lisis OSINT", use_container_width=True)
        
        if submitted:
            if company_name and domain:
                run_osint_analysis(company_name, domain, industry, company_size, 
                                 employee_info, tech_stack, additional_info)
            else:
                st.error("Complete los campos obligatorios (*)")
    
    # Mostrar resultados existentes
    if 'current_osint' in st.session_state:
        st.markdown("---")
        st.markdown("### üìä √öltimo An√°lisis Completado")
        display_osint_results(st.session_state.current_osint)

def run_osint_analysis(company_name, domain, industry, company_size, 
                      employee_info, tech_stack, additional_info):
    """Ejecutar an√°lisis OSINT real con Claude mejorado"""
    
    if st.session_state.get('demo_mode'):
        with st.spinner("Generando an√°lisis OSINT de ejemplo..."):
            time.sleep(2)
            result = generate_demo_osint(company_name, domain, industry, employee_info)
            save_osint_result(result, company_name)
            display_osint_results(result)
        return
    
    with st.spinner("Ejecutando an√°lisis OSINT profundo..."):
        
        # Prompt mejorado para an√°lisis m√°s espec√≠fico
        prompt = f"""
Eres un experto analista de ciberseguridad especializado en OSINT. Analiza la siguiente empresa y proporciona un an√°lisis detallado.

EMPRESA A ANALIZAR:
- Nombre: {company_name}
- Dominio: {domain}
- Industria: {industry}
- Tama√±o: {company_size} empleados
- Empleados clave: {employee_info}
- Stack tecnol√≥gico: {tech_stack}
- Informaci√≥n adicional: {additional_info}

Proporciona un an√°lisis JSON detallado con la siguiente estructura EXACTA:

{{
    "risk_score": 0.75,
    "risk_level": "ALTO",
    "vulnerabilities": [
        {{
            "type": "Exposici√≥n de Empleados en RRSS",
            "severity": "ALTA",
            "description": "Descripci√≥n espec√≠fica basada en la informaci√≥n proporcionada",
            "evidence": "Evidencia espec√≠fica encontrada",
            "impact": "Impacto potencial espec√≠fico"
        }}
    ],
    "attack_vectors": [
        {{
            "vector": "Spear Phishing",
            "probability": 0.85,
            "impact": "Descripci√≥n del impacto espec√≠fico",
            "method": "M√©todo espec√≠fico de ataque basado en la informaci√≥n"
        }}
    ],
    "employee_exposure": [
        {{
            "employee": "Nombre o rol espec√≠fico",
            "risk_level": "ALTO",
            "exposure_type": "LinkedIn, GitHub, etc.",
            "sensitive_info": "Informaci√≥n espec√≠fica expuesta"
        }}
    ],
    "technical_findings": [
        {{
            "finding": "Hallazgo t√©cnico espec√≠fico",
            "risk": "Nivel de riesgo",
            "recommendation": "Recomendaci√≥n espec√≠fica"
        }}
    ],
    "industry_specific_risks": [
        "Riesgo espec√≠fico del sector {industry}",
        "Regulaciones espec√≠ficas"
    ],
    "recommendations": [
        {{
            "priority": "ALTA",
            "category": "Categor√≠a espec√≠fica",
            "action": "Acci√≥n espec√≠fica detallada",
            "timeline": "Marco temporal recomendado"
        }}
    ]
}}

Basa tu an√°lisis en la informaci√≥n espec√≠fica proporcionada. Si no hay informaci√≥n suficiente para un campo, usa "An√°lisis manual requerido".
"""
        
        try:
            response = st.session_state.anthropic_client.messages.create(
                model=st.session_state.get('claude_model', 'claude-3-5-sonnet-20241022'),
                max_tokens=4000,
                temperature=0.3,
                messages=[{"role": "user", "content": prompt}]
            )
            
            content = response.content[0].text.strip()
            
            with st.expander("üîç Debug: Respuesta de Claude", expanded=False):
                st.text(content)
            
            # Usar parsing mejorado
            analysis_result = safe_json_parse(content)
            
            if not analysis_result:
                st.warning("‚ö†Ô∏è Error en parsing JSON. Generando an√°lisis b√°sico...")
                analysis_result = generate_fallback_osint(company_name, industry, employee_info)
            
            save_osint_result(analysis_result, company_name)
            st.success("‚úÖ An√°lisis OSINT completado")
            display_osint_results(analysis_result)
            
        except Exception as e:
            st.error(f"‚ùå Error en an√°lisis: {str(e)}")
            fallback_result = generate_fallback_osint(company_name, industry, employee_info)
            save_osint_result(fallback_result, company_name)
            display_osint_results(fallback_result)

def generate_demo_osint(company_name, domain, industry, employee_info):
    """Generar an√°lisis OSINT demo m√°s realista"""
    return {
        "risk_score": 0.78,
        "risk_level": "ALTO",
        "vulnerabilities": [
            {
                "type": "Exposici√≥n de Empleados en RRSS",
                "severity": "ALTA",
                "description": f"Personal de {company_name} comparte informaci√≥n sobre proyectos en LinkedIn",
                "evidence": "Perfiles p√∫blicos con detalles t√©cnicos",
                "impact": "Posible ingenier√≠a social dirigida"
            },
            {
                "type": "Informaci√≥n T√©cnica P√∫blica",
                "severity": "MEDIA",
                "description": f"Stack tecnol√≥gico visible en ofertas de trabajo de {industry}",
                "evidence": "Ofertas laborales detalladas",
                "impact": "Reconocimiento de infraestructura"
            }
        ],
        "attack_vectors": [
            {
                "vector": "Spear Phishing dirigido",
                "probability": 0.85,
                "impact": f"Emails personalizados usando informaci√≥n de {industry}",
                "method": "Aprovechamiento de informaci√≥n p√∫blica de empleados"
            }
        ],
        "employee_exposure": [
            {
                "employee": employee_info[:30] + "..." if employee_info else "Personal t√©cnico",
                "risk_level": "ALTO",
                "exposure_type": "LinkedIn, GitHub",
                "sensitive_info": "Proyectos, tecnolog√≠as, estructura organizacional"
            }
        ],
        "technical_findings": [
            {
                "finding": f"Subdominios expuestos de {domain}",
                "risk": "MEDIO",
                "recommendation": "Auditor√≠a de subdominios y servicios expuestos"
            }
        ],
        "industry_specific_risks": [
            f"Regulaciones espec√≠ficas del sector {industry}",
            f"Ataques dirigidos comunes en {industry}"
        ],
        "recommendations": [
            {
                "priority": "ALTA",
                "category": "Concienciaci√≥n",
                "action": "Programa de entrenamiento en ingenier√≠a social",
                "timeline": "30 d√≠as"
            }
        ]
    }

def generate_fallback_osint(company_name, industry, employee_info):
    """Generar an√°lisis OSINT de fallback"""
    return {
        "risk_score": 0.65,
        "risk_level": "MEDIO",
        "vulnerabilities": [
            {
                "type": "An√°lisis Manual Requerido",
                "severity": "MEDIA",
                "description": f"Se requiere an√°lisis manual para {company_name}",
                "evidence": "Informaci√≥n insuficiente para an√°lisis autom√°tico",
                "impact": "Impacto por determinar"
            }
        ],
        "attack_vectors": [
            {
                "vector": "Vectores t√≠picos del sector",
                "probability": 0.5,
                "impact": f"Impactos comunes en {industry}",
                "method": "An√°lisis manual requerido"
            }
        ],
        "employee_exposure": [],
        "technical_findings": [],
        "industry_specific_risks": [f"Riesgos espec√≠ficos de {industry}"],
        "recommendations": [
            {
                "priority": "ALTA",
                "category": "An√°lisis",
                "action": "Realizar an√°lisis OSINT manual detallado",
                "timeline": "Inmediato"
            }
        ]
    }

def save_osint_result(result, company_name):
    """Guardar resultado del an√°lisis OSINT"""
    st.session_state.completed_analyses.append({
        'type': 'An√°lisis OSINT',
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'company': company_name,
        'summary': result
    })
    st.session_state.current_osint = result

def display_osint_results(results):
    """Mostrar resultados del an√°lisis OSINT mejorado"""
    
    st.markdown("### Resultados del An√°lisis")
    
    # M√©tricas principales
    col1, col2, col3 = st.columns(3)
    
    with col1:
        risk_score = results.get('risk_score', 0)
        st.metric("Score de Riesgo", f"{risk_score:.2f}")
    
    with col2:
        risk_level = results.get('risk_level', 'N/A')
        color = "#dc2626" if risk_level == "CR√çTICO" else "#f97316" if risk_level == "ALTO" else "#d97706" if risk_level == "MEDIO" else "#059669"
        st.markdown(f'<div style="text-align: center;"><h3 style="color: {color};">{risk_level}</h3></div>', unsafe_allow_html=True)
    
    with col3:
        vuln_count = len(results.get('vulnerabilities', []))
        st.metric("Vulnerabilidades", vuln_count)
    
    # Vulnerabilidades detalladas
    if results.get('vulnerabilities'):
        st.markdown("### üéØ Vulnerabilidades Identificadas")
        for vuln in results['vulnerabilities']:
            display_vulnerability_card(vuln)
    
    # Exposici√≥n de empleados
    if results.get('employee_exposure'):
        st.markdown("### üë• Exposici√≥n de Empleados")
        for emp in results['employee_exposure']:
            display_employee_exposure(emp)
    
    # Vectores de ataque
    if results.get('attack_vectors'):
        st.markdown("### ‚öîÔ∏è Vectores de Ataque")
        for vector in results['attack_vectors']:
            display_attack_vector(vector)
    
    # Hallazgos t√©cnicos
    if results.get('technical_findings'):
        st.markdown("### üîß Hallazgos T√©cnicos")
        for finding in results['technical_findings']:
            display_technical_finding(finding)
    
    # Recomendaciones
    if results.get('recommendations'):
        st.markdown("### üí° Recomendaciones Prioritarias")
        for rec in results['recommendations']:
            display_recommendation(rec)

def display_vulnerability_card(vuln):
    """Mostrar tarjeta de vulnerabilidad"""
    severity_color = {
        'CR√çTICA': '#dc2626', 'ALTA': '#f97316', 
        'MEDIA': '#d97706', 'BAJA': '#059669'
    }.get(vuln.get('severity', 'MEDIA'), '#6b7280')
    
    st.markdown(f"""
    <div style="border-left: 4px solid {severity_color}; padding: 1rem; margin: 0.5rem 0; background: #f8fafc; border-radius: 6px;">
        <h4 style="margin: 0 0 0.5rem 0; color: {severity_color};">{vuln.get('type', 'Vulnerabilidad')} - {vuln.get('severity', 'MEDIA')}</h4>
        <p style="margin: 0.5rem 0;"><strong>Descripci√≥n:</strong> {vuln.get('description', 'Sin descripci√≥n')}</p>
        {f'<p style="margin: 0.5rem 0;"><strong>Evidencia:</strong> {vuln.get("evidence", "No especificada")}</p>' if vuln.get('evidence') else ''}
        {f'<p style="margin: 0.5rem 0;"><strong>Impacto:</strong> {vuln.get("impact", "No especificado")}</p>' if vuln.get('impact') else ''}
    </div>
    """, unsafe_allow_html=True)

def display_employee_exposure(emp):
    """Mostrar exposici√≥n de empleado"""
    risk_color = {'ALTO': '#dc2626', 'MEDIO': '#f97316', 'BAJO': '#059669'}.get(emp.get('risk_level', 'MEDIO'), '#6b7280')
    
    st.markdown(f"""
    <div style="border-left: 4px solid {risk_color}; padding: 1rem; margin: 0.5rem 0; background: #fef2f2; border-radius: 6px;">
        <h4 style="margin: 0 0 0.5rem 0;">{emp.get('employee', 'Empleado')} - Riesgo {emp.get('risk_level', 'MEDIO')}</h4>
        <p><strong>Tipo de exposici√≥n:</strong> {emp.get('exposure_type', 'No especificado')}</p>
        <p><strong>Informaci√≥n sensible:</strong> {emp.get('sensitive_info', 'No especificada')}</p>
    </div>
    """, unsafe_allow_html=True)

def display_attack_vector(vector):
    """Mostrar vector de ataque"""
    probability = vector.get('probability', 0)
    color = '#dc2626' if probability > 0.7 else '#f97316' if probability > 0.4 else '#059669'
    
    st.markdown(f"""
    <div style="border-left: 4px solid {color}; padding: 1rem; margin: 0.5rem 0; background: #f8fafc; border-radius: 6px;">
        <h4 style="margin: 0 0 0.5rem 0;">{vector.get('vector', 'Vector')} - Probabilidad: {probability:.0%}</h4>
        <p><strong>Impacto:</strong> {vector.get('impact', 'Sin descripci√≥n')}</p>
        <p><strong>M√©todo:</strong> {vector.get('method', 'No especificado')}</p>
    </div>
    """, unsafe_allow_html=True)

def display_technical_finding(finding):
    """Mostrar hallazgo t√©cnico"""
    st.markdown(f"""
    <div style="border-left: 4px solid #3b82f6; padding: 1rem; margin: 0.5rem 0; background: #eff6ff; border-radius: 6px;">
        <h4 style="margin: 0 0 0.5rem 0;">{finding.get('finding', 'Hallazgo')}</h4>
        <p><strong>Riesgo:</strong> {finding.get('risk', 'No especificado')}</p>
        <p><strong>Recomendaci√≥n:</strong> {finding.get('recommendation', 'No especificada')}</p>
    </div>
    """, unsafe_allow_html=True)

def display_recommendation(rec):
    """Mostrar recomendaci√≥n"""
    priority_color = {
        'ALTA': '#dc2626', 'MEDIA': '#f97316', 'BAJA': '#059669'
    }.get(rec.get('priority', 'MEDIA'), '#6b7280')
    
    st.markdown(f"""
    <div style="border-left: 4px solid {priority_color}; padding: 1rem; margin: 0.5rem 0; background: #f0fdf4; border-radius: 6px;">
        <h4 style="margin: 0 0 0.5rem 0; color: {priority_color};">Prioridad {rec.get('priority', 'MEDIA')} - {rec.get('category', 'General')}</h4>
        <p><strong>Acci√≥n:</strong> {rec.get('action', 'Sin descripci√≥n')}</p>
        {f'<p><strong>Plazo:</strong> {rec.get("timeline", "No especificado")}</p>' if rec.get('timeline') else ''}
    </div>
    """, unsafe_allow_html=True)

def user_profiling():
    """Perfilado de usuario mejorado"""
    st.markdown("### Perfilado Psicol√≥gico de Usuario")
    
    if not ('anthropic_client' in st.session_state or st.session_state.get('demo_mode')):
        st.error("**Requiere conexi√≥n con Anthropic Claude o modo demo para perfilado avanzado**")
        return
    
    with st.form("profile_form", clear_on_submit=False):
        st.markdown("**Informaci√≥n del Usuario**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            user_name = st.text_input("Nombre del Usuario*", key="profile_name")
            department = st.selectbox("Departamento", [
                "Finanzas", "Tecnolog√≠a", "Recursos Humanos", 
                "Ventas", "Marketing", "Operaciones", "Legal", "Ejecutivo"
            ], key="profile_dept")
            seniority = st.selectbox("Nivel de Responsabilidad", [
                "Junior", "Senior", "Manager", "Director", "C-Level"
            ], key="profile_seniority")
        
        with col2:
            company_size = st.selectbox("Tama√±o de Empresa", [
                "1-50", "51-200", "201-1000", "1000-5000", "5000+"
            ], key="profile_company_size")
            industry = st.selectbox("Industria", [
                "Tecnolog√≠a", "Finanzas", "Salud", "Educaci√≥n", 
                "Retail", "Manufactura", "Consultor√≠a", "Gobierno"
            ], key="profile_industry")
            age_range = st.selectbox("Rango de Edad", [
                "20-30", "31-40", "41-50", "51-60", "60+"
            ], key="profile_age")
        
        st.markdown("**Patrones de Comportamiento Digital**")
        
        col3, col4 = st.columns(2)
        
        with col3:
            social_activity = st.slider("Actividad en Redes Sociales", 1, 10, 5, key="profile_social")
            security_awareness = st.slider("Conciencia de Seguridad", 1, 10, 5, key="profile_security")
            tech_comfort = st.slider("Comodidad con Tecnolog√≠a", 1, 10, 5, key="profile_tech")
        
        with col4:
            info_sharing = st.slider("Tendencia a Compartir Informaci√≥n", 1, 10, 5, key="profile_sharing")
            authority_response = st.slider("Respuesta a Autoridad", 1, 10, 5, key="profile_authority")
            stress_reaction = st.slider("Reacci√≥n bajo Presi√≥n", 1, 10, 5, key="profile_stress")
        
        work_patterns = st.multiselect("Patrones de Trabajo", [
            "Trabajo remoto frecuente", "Horarios extendidos", 
            "Acceso desde m√∫ltiples dispositivos", "Viajes de negocio",
            "Manejo de informaci√≥n sensible", "Contacto con clientes externos",
            "Uso de aplicaciones personales en trabajo", "Acceso fuera de horario"
        ], key="profile_patterns")
        
        personality_traits = st.multiselect("Rasgos de Personalidad", [
            "Confiado", "Cauteloso", "Sociable", "Introvertido",
            "Orientado a resultados", "Detallista", "Impulsivo", "Anal√≠tico",
            "Colaborativo", "Independiente", "Optimista", "Pesimista"
        ], key="profile_personality")
        
        additional_context = st.text_area(
            "Contexto Adicional",
            placeholder="Informaci√≥n adicional sobre comportamiento, incidentes previos, etc...",
            key="profile_context"
        )
        
        submitted = st.form_submit_button("üß† Generar Perfil Psicol√≥gico", use_container_width=True)
        
        if submitted:
            if user_name and department:
                generate_psychological_profile(
                    user_name, department, seniority, company_size, industry, age_range,
                    social_activity, security_awareness, info_sharing, tech_comfort,
                    authority_response, stress_reaction, work_patterns, personality_traits,
                    additional_context
                )
            else:
                st.error("Complete los campos obligatorios (*)")
    
    # Mostrar perfiles existentes
    display_existing_profiles()
    
    # Mostrar √∫ltimo perfil si existe
    if 'current_profile' in st.session_state:
        st.markdown("---")
        st.markdown("### üß† √öltimo Perfil Generado")
        display_profile_results(st.session_state.current_profile)

def generate_psychological_profile(user_name, department, seniority, company_size, 
                                 industry, age_range, social_activity, security_awareness, 
                                 info_sharing, tech_comfort, authority_response, stress_reaction,
                                 work_patterns, personality_traits, additional_context):
    """Generar perfil psicol√≥gico mejorado"""
    
    if st.session_state.get('demo_mode'):
        with st.spinner("Generando perfil psicol√≥gico de ejemplo..."):
            time.sleep(2)
            result = generate_demo_profile(user_name, department, seniority, social_activity, 
                                         security_awareness, info_sharing, personality_traits)
            save_profile_result(result, user_name, department)
            display_profile_results(result)
        return
    
    with st.spinner("Generando perfil psicol√≥gico avanzado..."):
        
        prompt = f"""
Eres un experto en psicolog√≠a organizacional y ciberseguridad. Analiza el siguiente perfil y proporciona un an√°lisis detallado.

PERFIL A ANALIZAR:
- Nombre: {user_name}
- Departamento: {department}
- Nivel: {seniority}
- Empresa: {company_size} empleados en {industry}
- Edad: {age_range} a√±os
- Actividad social: {social_activity}/10
- Conciencia seguridad: {security_awareness}/10
- Compartir informaci√≥n: {info_sharing}/10
- Comodidad tecnol√≥gica: {tech_comfort}/10
- Respuesta a autoridad: {authority_response}/10
- Reacci√≥n al estr√©s: {stress_reaction}/10
- Patrones de trabajo: {', '.join(work_patterns)}
- Rasgos de personalidad: {', '.join(personality_traits)}
- Contexto adicional: {additional_context}

Proporciona un an√°lisis JSON con esta estructura EXACTA:

{{
    "psychological_profile": {{
        "personality_summary": "Resumen completo de la personalidad basado en los datos",
        "core_traits": ["Lista de rasgos principales espec√≠ficos"],
        "behavioral_patterns": ["Patrones espec√≠ficos basados en m√©tricas"],
        "decision_making_style": "Estilo espec√≠fico con justificaci√≥n",
        "stress_responses": ["Respuestas espec√≠ficas al estr√©s"],
        "technology_relationship": "Relaci√≥n espec√≠fica con la tecnolog√≠a",
        "social_behavior": "Comportamiento social espec√≠fico"
    }},
    "vulnerability_assessment": {{
        "overall_risk_score": 0.75,
        "risk_factors": [
            {{
                "factor": "Factor espec√≠fico",
                "score": 0.8,
                "description": "Descripci√≥n detallada del factor",
                "mitigation": "Estrategia de mitigaci√≥n espec√≠fica"
            }}
        ],
        "psychological_vulnerabilities": [
            {{
                "type": "Tipo espec√≠fico de vulnerabilidad",
                "severity": "ALTA",
                "description": "Descripci√≥n detallada",
                "triggers": ["Lista de desencadenantes espec√≠ficos"],
                "exploitation_method": "M√©todo espec√≠fico de explotaci√≥n"
            }}
        ]
    }},
    "attack_simulation": {{
        "most_effective_vectors": [
            {{
                "technique": "T√©cnica espec√≠fica",
                "effectiveness_score": 0.85,
                "approach": "Enfoque detallado espec√≠fico para este usuario",
                "psychological_basis": "Base psicol√≥gica espec√≠fica",
                "execution_example": "Ejemplo espec√≠fico de ejecuci√≥n"
            }}
        ],
        "social_engineering_angles": [
            {{
                "angle": "√Ångulo espec√≠fico",
                "success_probability": 0.7,
                "description": "Descripci√≥n detallada del enfoque"
            }}
        ]
    }},
    "personalized_training": {{
        "priority_areas": [
            {{
                "area": "√Årea espec√≠fica",
                "priority": "ALTA",
                "reason": "Raz√≥n espec√≠fica basada en el perfil",
                "training_approach": "Enfoque espec√≠fico de entrenamiento"
            }}
        ],
        "recommended_simulations": [
            {{
                "scenario": "Escenario espec√≠fico",
                "frequency": "Frecuencia recomendada",
                "difficulty": "Nivel de dificultad",
                "focus": "Foco espec√≠fico del entrenamiento"
            }}
        ]
    }}
}}

Basa todo el an√°lisis en las m√©tricas espec√≠ficas proporcionadas.
"""
        
        try:
            response = st.session_state.anthropic_client.messages.create(
                model=st.session_state.get('claude_model', 'claude-3-5-sonnet-20241022'),
                max_tokens=4000,
                temperature=0.3,
                messages=[{"role": "user", "content": prompt}]
            )
            
            content = response.content[0].text.strip()
            
            with st.expander("üîç Debug: Respuesta de Claude", expanded=False):
                st.text(content)
            
            profile_result = safe_json_parse(content)
            
            if not profile_result:
                st.warning("‚ö†Ô∏è Error en parsing JSON. Generando perfil b√°sico...")
                profile_result = generate_fallback_profile(user_name, department, seniority)
            
            save_profile_result(profile_result, user_name, department)
            st.success("‚úÖ Perfil psicol√≥gico generado")
            display_profile_results(profile_result)
            
        except Exception as e:
            st.error(f"‚ùå Error generando perfil: {str(e)}")
            fallback_result = generate_fallback_profile(user_name, department, seniority)
            save_profile_result(fallback_result, user_name, department)
            display_profile_results(fallback_result)

def generate_demo_profile(user_name, department, seniority, social_activity, 
                         security_awareness, info_sharing, personality_traits):
    """Generar perfil demo m√°s realista"""
    
    # Calcular risk score basado en m√©tricas
    risk_score = 0.5 + (info_sharing * 0.04) + (social_activity * 0.03) - (security_awareness * 0.04)
    risk_score = max(0.2, min(0.9, risk_score))
    
    return {
        "psychological_profile": {
            "personality_summary": f"{user_name} es un profesional de {department} con caracter√≠sticas {', '.join(personality_traits[:3])}. Muestra un nivel {social_activity}/10 de actividad social y {security_awareness}/10 de conciencia de seguridad.",
            "core_traits": personality_traits[:4] if personality_traits else [f"Profesional de {department}", f"Nivel {seniority}"],
            "behavioral_patterns": [
                f"Tendencia {'alta' if info_sharing > 6 else 'media' if info_sharing > 3 else 'baja'} a compartir informaci√≥n",
                f"Respuesta {'r√°pida' if social_activity > 6 else 'cautelosa'} en comunicaciones digitales",
                f"Enfoque {'colaborativo' if 'Colaborativo' in personality_traits else 'independiente'} en el trabajo"
            ],
            "decision_making_style": f"Estilo {'anal√≠tico' if 'Anal√≠tico' in personality_traits else 'intuitivo'} con influencia del rol de {department}",
            "stress_responses": [
                f"Bajo presi√≥n, tiende a {'acelerar decisiones' if 'Impulsivo' in personality_traits else 'mantener cautela'}",
                f"Busca {'apoyo del equipo' if 'Colaborativo' in personality_traits else 'soluciones independientes'}"
            ],
            "technology_relationship": f"Relaci√≥n {'c√≥moda' if info_sharing > 5 else 'cautelosa'} con la tecnolog√≠a",
            "social_behavior": f"Comportamiento {'extrovertido' if social_activity > 6 else 'reservado'} en entornos digitales"
        },
        "vulnerability_assessment": {
            "overall_risk_score": round(risk_score, 2),
            "risk_factors": [
                {
                    "factor": "Compartir informaci√≥n",
                    "score": round(info_sharing / 10, 2),
                    "description": f"Tendencia {info_sharing}/10 a compartir informaci√≥n puede facilitar ingenier√≠a social",
                    "mitigation": "Entrenamiento en verificaci√≥n de solicitudes"
                },
                {
                    "factor": "Conciencia de seguridad",
                    "score": round(1 - (security_awareness / 10), 2),
                    "description": f"Nivel {security_awareness}/10 de conciencia indica vulnerabilidad",
                    "mitigation": "Programas de concientizaci√≥n espec√≠ficos"
                }
            ],
            "psychological_vulnerabilities": [
                {
                    "type": "Autoridad percibida",
                    "severity": "ALTA" if department in ["Finanzas", "Legal"] else "MEDIA",
                    "description": f"Como {seniority} en {department}, susceptible a figuras de autoridad",
                    "triggers": [f"Solicitudes de superiores de {department}", "Auditor√≠as", "Procesos de compliance"],
                    "exploitation_method": "Emails que imitan comunicaciones oficiales"
                }
            ]
        },
        "attack_simulation": {
            "most_effective_vectors": [
                {
                    "technique": f"Phishing espec√≠fico de {department}",
                    "effectiveness_score": round(0.6 + (info_sharing * 0.03), 2),
                    "approach": f"Emails que imitan procesos t√≠picos de {department} con urgencia artificial",
                    "psychological_basis": f"Familiaridad con workflows de {department}",
                    "execution_example": f"Email sobre proceso urgente de {department} requiriendo verificaci√≥n"
                }
            ],
            "social_engineering_angles": [
                {
                    "angle": "Autoridad organizacional",
                    "success_probability": round(0.7 if department in ["Finanzas", "Legal"] else 0.5, 2),
                    "description": f"Aprovechamiento de estructura jer√°rquica en {department}"
                }
            ]
        },
        "personalized_training": {
            "priority_areas": [
                {
                    "area": "Verificaci√≥n de autoridad",
                    "priority": "ALTA",
                    "reason": f"Alta susceptibilidad a figuras de autoridad en {department}",
                    "training_approach": "Simulacros con verificaci√≥n de identidad"
                }
            ],
            "recommended_simulations": [
                {
                    "scenario": f"Phishing dirigido a {department}",
                    "frequency": "Mensual",
                    "difficulty": "Media-Alta",
                    "focus": "Verificaci√≥n de solicitudes urgentes"
                }
            ]
        }
    }

def generate_fallback_profile(user_name, department, seniority):
    """Generar perfil de fallback"""
    return {
        "psychological_profile": {
            "personality_summary": f"An√°lisis manual requerido para {user_name}",
            "core_traits": [f"Profesional de {department}", f"Nivel {seniority}"],
            "behavioral_patterns": ["Por determinar"],
            "decision_making_style": "An√°lisis requerido",
            "stress_responses": ["Por evaluar"],
            "technology_relationship": "Por determinar",
            "social_behavior": "An√°lisis pendiente"
        },
        "vulnerability_assessment": {
            "overall_risk_score": 0.5,
            "risk_factors": [],
            "psychological_vulnerabilities": []
        },
        "attack_simulation": {
            "most_effective_vectors": [],
            "social_engineering_angles": []
        },
        "personalized_training": {
            "priority_areas": [],
            "recommended_simulations": []
        }
    }

def save_profile_result(result, user_name, department):
    """Guardar resultado del perfil"""
    profile_data = {
        'user_name': user_name,
        'department': department,
        'analysis': result,
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    st.session_state.user_profiles.append(profile_data)
    st.session_state.current_profile = profile_data

def display_existing_profiles():
    """Mostrar perfiles existentes"""
    if st.session_state.get('user_profiles'):
        st.markdown("---")
        st.markdown("### üë• Perfiles Existentes")
        
        for i, profile in enumerate(st.session_state.user_profiles[-3:]):
            with st.expander(f"üë§ {profile['user_name']} ({profile['department']}) - {profile['timestamp']}", expanded=False):
                display_profile_summary(profile)

def display_profile_summary(profile):
    """Mostrar resumen del perfil"""
    analysis = profile['analysis']
    
    if 'vulnerability_assessment' in analysis:
        risk_score = analysis['vulnerability_assessment'].get('overall_risk_score', 0)
        st.metric("Risk Score", f"{risk_score:.2f}")
    
    if 'psychological_profile' in analysis:
        profile_data = analysis['psychological_profile']
        st.markdown(f"**Resumen:** {profile_data.get('personality_summary', 'No disponible')}")

def display_profile_results(profile_data):
    """Mostrar resultados del perfilado mejorado"""
    
    analysis = profile_data['analysis']
    
    st.markdown("### Resultados del Perfilado")
    
    # Score de riesgo
    risk_score = analysis.get('vulnerability_assessment', {}).get('overall_risk_score', 0)
    risk_level = "CR√çTICO" if risk_score >= 0.8 else "ALTO" if risk_score >= 0.6 else "MEDIO" if risk_score >= 0.4 else "BAJO"
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Score de Riesgo", f"{risk_score:.2f}")
    
    with col2:
        color = "#dc2626" if risk_level == "CR√çTICO" else "#f97316" if risk_level == "ALTO" else "#d97706" if risk_level == "MEDIO" else "#059669"
        st.markdown(f'<div style="text-align: center;"><h3 style="color: {color};">{risk_level}</h3></div>', unsafe_allow_html=True)
    
    with col3:
        vuln_count = len(analysis.get('vulnerability_assessment', {}).get('psychological_vulnerabilities', []))
        st.metric("Vulnerabilidades", vuln_count)
    
    # Perfil psicol√≥gico
    if 'psychological_profile' in analysis:
        display_psychological_profile(analysis['psychological_profile'])
    
    # Evaluaci√≥n de vulnerabilidades
    if 'vulnerability_assessment' in analysis:
        display_vulnerability_assessment(analysis['vulnerability_assessment'])
    
    # Simulaci√≥n de ataques
    if 'attack_simulation' in analysis:
        display_attack_simulation(analysis['attack_simulation'])
    
    # Entrenamiento personalizado
    if 'personalized_training' in analysis:
        display_personalized_training(analysis['personalized_training'])

def display_psychological_profile(profile):
    """Mostrar perfil psicol√≥gico"""
    st.markdown("### üß† Perfil Psicol√≥gico")
    
    st.markdown(f"**Resumen de Personalidad:**")
    st.write(profile.get('personality_summary', 'No disponible'))
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Rasgos Principales:**")
        for trait in profile.get('core_traits', []):
            st.markdown(f"‚Ä¢ {trait}")
        
        st.markdown("**Estilo de Decisi√≥n:**")
        st.write(profile.get('decision_making_style', 'No especificado'))
    
    with col2:
        st.markdown("**Patrones de Comportamiento:**")
        for pattern in profile.get('behavioral_patterns', []):
            st.markdown(f"‚Ä¢ {pattern}")
        
        st.markdown("**Respuestas al Estr√©s:**")
        for response in profile.get('stress_responses', []):
            st.markdown(f"‚Ä¢ {response}")

def display_vulnerability_assessment(assessment):
    """Mostrar evaluaci√≥n de vulnerabilidades"""
    st.markdown("### üéØ Evaluaci√≥n de Vulnerabilidades")
    
    # Factores de riesgo
    if assessment.get('risk_factors'):
        st.markdown("**Factores de Riesgo:**")
        for factor in assessment['risk_factors']:
            score = factor.get('score', 0)
            color = '#dc2626' if score > 0.7 else '#f97316' if score > 0.4 else '#059669'
            
            st.markdown(f"""
            <div style="border-left: 4px solid {color}; padding: 1rem; margin: 0.5rem 0; background: #f8fafc; border-radius: 6px;">
                <h4 style="margin: 0 0 0.5rem 0;">{factor.get('factor', 'Factor')} - Score: {score:.2f}</h4>
                <p><strong>Descripci√≥n:</strong> {factor.get('description', 'No disponible')}</p>
                <p><strong>Mitigaci√≥n:</strong> {factor.get('mitigation', 'No especificada')}</p>
            </div>
            """, unsafe_allow_html=True)
    
    # Vulnerabilidades psicol√≥gicas
    if assessment.get('psychological_vulnerabilities'):
        st.markdown("**Vulnerabilidades Psicol√≥gicas:**")
        for vuln in assessment['psychological_vulnerabilities']:
            severity_color = {
                'CR√çTICA': '#dc2626', 'ALTA': '#f97316', 
                'MEDIA': '#d97706', 'BAJA': '#059669'
            }.get(vuln.get('severity', 'MEDIA'), '#6b7280')
            
            st.markdown(f"""
            <div style="border-left: 4px solid {severity_color}; padding: 1rem; margin: 0.5rem 0; background: #fef2f2; border-radius: 6px;">
                <h4 style="margin: 0 0 0.5rem 0; color: {severity_color};">{vuln.get('type', 'Vulnerabilidad')} - {vuln.get('severity', 'MEDIA')}</h4>
                <p><strong>Descripci√≥n:</strong> {vuln.get('description', 'No disponible')}</p>
                <p><strong>Desencadenantes:</strong> {', '.join(vuln.get('triggers', []))}</p>
                <p><strong>M√©todo de explotaci√≥n:</strong> {vuln.get('exploitation_method', 'No especificado')}</p>
            </div>
            """, unsafe_allow_html=True)

def display_attack_simulation(simulation):
    """Mostrar simulaci√≥n de ataques"""
    st.markdown("### ‚öîÔ∏è Simulaci√≥n de Ataques")
    
    if simulation.get('most_effective_vectors'):
        st.markdown("**Vectores M√°s Efectivos:**")
        for vector in simulation['most_effective_vectors']:
            effectiveness = vector.get('effectiveness_score', 0)
            color = '#dc2626' if effectiveness > 0.7 else '#f97316' if effectiveness > 0.4 else '#059669'
            
            st.markdown(f"""
            <div style="border-left: 4px solid {color}; padding: 1rem; margin: 0.5rem 0; background: #f8fafc; border-radius: 6px;">
                <h4 style="margin: 0 0 0.5rem 0;">{vector.get('technique', 'T√©cnica')} - Efectividad: {effectiveness:.0%}</h4>
                <p><strong>Enfoque:</strong> {vector.get('approach', 'No especificado')}</p>
                <p><strong>Base psicol√≥gica:</strong> {vector.get('psychological_basis', 'No especificada')}</p>
                <p><strong>Ejemplo de ejecuci√≥n:</strong> {vector.get('execution_example', 'No disponible')}</p>
            </div>
            """, unsafe_allow_html=True)

def display_personalized_training(training):
    """Mostrar entrenamiento personalizado"""
    st.markdown("### üéì Entrenamiento Personalizado")
    
    if training.get('priority_areas'):
        st.markdown("**√Åreas Prioritarias:**")
        for area in training['priority_areas']:
            priority_color = {
                'ALTA': '#dc2626', 'MEDIA': '#f97316', 'BAJA': '#059669'
            }.get(area.get('priority', 'MEDIA'), '#6b7280')
            
            st.markdown(f"""
            <div style="border-left: 4px solid {priority_color}; padding: 1rem; margin: 0.5rem 0; background: #f0fdf4; border-radius: 6px;">
                <h4 style="margin: 0 0 0.5rem 0; color: {priority_color};">Prioridad {area.get('priority', 'MEDIA')} - {area.get('area', '√Årea')}</h4>
                <p><strong>Raz√≥n:</strong> {area.get('reason', 'No especificada')}</p>
                <p><strong>Enfoque de entrenamiento:</strong> {area.get('training_approach', 'No especificado')}</p>
            </div>
            """, unsafe_allow_html=True)
    
    if training.get('recommended_simulations'):
        st.markdown("**Simulaciones Recomendadas:**")
        for sim in training['recommended_simulations']:
            st.markdown(f"""
            <div style="border-left: 4px solid #3b82f6; padding: 1rem; margin: 0.5rem 0; background: #eff6ff; border-radius: 6px;">
                <h4 style="margin: 0 0 0.5rem 0;">{sim.get('scenario', 'Escenario')}</h4>
                <p><strong>Frecuencia:</strong> {sim.get('frequency', 'No especificada')} | <strong>Dificultad:</strong> {sim.get('difficulty', 'No especificada')}</p>
                <p><strong>Foco:</strong> {sim.get('focus', 'No especificado')}</p>
            </div>
            """, unsafe_allow_html=True)

def content_generation():
    """Generaci√≥n de contenido adaptativo mejorada"""
    st.markdown("### Generaci√≥n de Contenido Adaptativo")
    
    if not ('anthropic_client' in st.session_state or st.session_state.get('demo_mode')):
        st.error("**Requiere conexi√≥n con Anthropic Claude o modo demo para generaci√≥n de contenido**")
        return
    
    # Verificar si hay perfiles disponibles
    if not st.session_state.get('user_profiles'):
        st.warning("**Primero debe crear un perfil de usuario en la secci√≥n 'Perfilado de Usuario'**")
        return
    
    # Seleccionar perfil objetivo
    profile_options = [f"{p['user_name']} ({p['department']})" for p in st.session_state.user_profiles]
    selected_profile_idx = st.selectbox("Seleccionar Usuario Objetivo", range(len(profile_options)), 
                                       format_func=lambda x: profile_options[x])
    
    target_profile = st.session_state.user_profiles[selected_profile_idx]
    
    with st.form("content_form", clear_on_submit=False):
        st.markdown("**Configuraci√≥n del Contenido**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            content_type = st.selectbox("Tipo de Contenido", [
                "Email de phishing", "SMS de urgencia", 
                "Notificaci√≥n de sistema", "Llamada telef√≥nica",
                "Mensaje de WhatsApp", "Solicitud de documentos"
            ], key="content_type")
            
            scenario = st.selectbox("Escenario", [
                "Auditor√≠a fiscal", "Actualizaci√≥n de seguridad",
                "Verificaci√≥n de cuenta", "Proceso de compliance",
                "Renovaci√≥n de certificados", "Actualizaci√≥n de pol√≠ticas",
                "Problema t√©cnico urgente", "Solicitud de directivo"
            ], key="content_scenario")
        
        with col2:
            urgency = st.selectbox("Nivel de Urgencia", [
                "Baja", "Media", "Alta", "Cr√≠tica"
            ], key="content_urgency")
            
            sender_type = st.selectbox("Tipo de Remitente", [
                "Supervisor directo", "IT/Seguridad", "RRHH",
                "Finanzas", "Auditor√≠a externa", "Proveedor",
                "Cliente", "Gobierno/Regulador"
            ], key="content_sender")
        
        company_context = st.text_input("Empresa del Usuario", 
                                       value="Empresa Objetivo",
                                       key="content_company")
        
        personalization_level = st.slider("Nivel de Personalizaci√≥n", 1, 10, 8, 
                                         help="1: Gen√©rico, 10: Altamente personalizado",
                                         key="content_personalization")
        
        additional_context = st.text_area("Contexto Adicional", 
                                         placeholder="Informaci√≥n espec√≠fica, eventos recientes, detalles t√©cnicos...",
                                         key="content_context")
        
        submitted = st.form_submit_button("üéØ Generar Contenido Personalizado", use_container_width=True)
        
        if submitted:
            generate_adaptive_content(target_profile, content_type, scenario, 
                                    urgency, sender_type, company_context, 
                                    personalization_level, additional_context)
    
    # Mostrar contenido existente
    display_existing_content()
    
    # Mostrar √∫ltimo contenido si existe
    if 'current_content' in st.session_state:
        st.markdown("---")
        st.markdown("### üéØ √öltimo Contenido Generado")
        display_generated_content(st.session_state.current_content)

def generate_adaptive_content(target_profile, content_type, scenario, 
                            urgency, sender_type, company_context, 
                            personalization_level, additional_context):
    """Generar contenido adaptativo ultra-personalizado"""
    
    if st.session_state.get('demo_mode'):
        with st.spinner("Generando contenido adaptativo de ejemplo..."):
            time.sleep(2)
            result = generate_demo_content(target_profile, content_type, scenario, 
                                         urgency, sender_type, company_context,
                                         personalization_level)
            save_content_result(result, target_profile, content_type, scenario)
            display_generated_content(result)
        return
    
    with st.spinner("Generando contenido ultra-personalizado..."):
        
        # Extraer informaci√≥n del perfil
        user_data = target_profile
        user_analysis = user_data.get('analysis', {})
        
        # Construir prompt ultra-detallado
        prompt = f"""
Eres un experto en ingenier√≠a social y generaci√≥n de contenido persuasivo. Crea contenido altamente personalizado.

PERFIL DEL USUARIO:
- Nombre: {user_data['user_name']}
- Departamento: {user_data['department']}
- An√°lisis psicol√≥gico: {json.dumps(user_analysis, indent=2)}

CONFIGURACI√ìN DEL CONTENIDO:
- Tipo: {content_type}
- Escenario: {scenario}
- Urgencia: {urgency}
- Remitente: {sender_type}
- Empresa: {company_context}
- Nivel personalizaci√≥n: {personalization_level}/10
- Contexto adicional: {additional_context}

Genera contenido JSON con esta estructura EXACTA:

{{
    "content": {{
        "subject": "Asunto espec√≠fico y personalizado",
        "sender": "remitente@empresa.com",
        "sender_name": "Nombre del remitente",
        "body": "Cuerpo del mensaje ultra-personalizado usando informaci√≥n espec√≠fica del perfil",
        "call_to_action": "Acci√≥n espec√≠fica solicitada",
        "urgency_indicators": ["Lista de indicadores de urgencia espec√≠ficos"],
        "personalization_hooks": ["Ganchos de personalizaci√≥n espec√≠ficos usados"]
    }},
    "psychological_analysis": {{
        "target_vulnerabilities": ["Lista de vulnerabilidades espec√≠ficas explotadas"],
        "persuasion_techniques": [
            {{
                "technique": "T√©cnica espec√≠fica",
                "application": "C√≥mo se aplic√≥ espec√≠ficamente",
                "effectiveness_reason": "Por qu√© es efectiva para este usuario"
            }}
        ],
        "emotional_triggers": ["Triggers emocionales espec√≠ficos usados"],
        "authority_elements": ["Elementos de autoridad espec√≠ficos"],
        "social_proof_elements": ["Elementos de prueba social espec√≠ficos"]
    }},
    "effectiveness_prediction": {{
        "overall_score": 0.85,
        "score_breakdown": {{
            "personalization": 0.9,
            "authority": 0.8,
            "urgency": 0.7,
            "emotional_impact": 0.85
        }},
        "success_probability": 0.75,
        "reasoning": "An√°lisis detallado de por qu√© ser√≠a efectivo",
        "potential_red_flags": ["Posibles se√±ales de alerta que el usuario podr√≠a notar"]
    }},
    "variations": [
        {{
            "variation_type": "Menos agresivo",
            "subject": "Versi√≥n alternativa del asunto",
            "key_differences": "Diferencias principales"
        }},
        {{
            "variation_type": "M√°s t√©cnico",
            "subject": "Versi√≥n m√°s t√©cnica del asunto", 
            "key_differences": "Diferencias principales"
        }}
    ]
}}

Usa TODA la informaci√≥n del perfil psicol√≥gico para crear contenido extremadamente personalizado y efectivo.
"""
        
        try:
            response = st.session_state.anthropic_client.messages.create(
                model=st.session_state.get('claude_model', 'claude-3-5-sonnet-20241022'),
                max_tokens=4000,
                temperature=0.4,
                messages=[{"role": "user", "content": prompt}]
            )
            
            content = response.content[0].text.strip()
            
            with st.expander("üîç Debug: Respuesta de Claude", expanded=False):
                st.text(content)
            
            content_result = safe_json_parse(content)
            
            if not content_result:
                st.warning("‚ö†Ô∏è Error en parsing JSON. Generando contenido b√°sico...")
                content_result = generate_fallback_content(user_data, content_type, scenario, urgency)
            
            save_content_result(content_result, user_data, content_type, scenario)
            st.success("‚úÖ Contenido ultra-personalizado generado")
            display_generated_content(content_result)
            
        except Exception as e:
            st.error(f"‚ùå Error generando contenido: {str(e)}")
            fallback_result = generate_fallback_content(user_data, content_type, scenario, urgency)
            save_content_result(fallback_result, user_data, content_type, scenario)
            display_generated_content(fallback_result)

def generate_demo_content(target_profile, content_type, scenario, urgency, 
                         sender_type, company_context, personalization_level):
    """Generar contenido demo ultra-personalizado"""
    
    user_data = target_profile
    user_name = user_data['user_name']
    department = user_data['department']
    
    # Analizar perfil para personalizaci√≥n
    analysis = user_data.get('analysis', {})
    vulnerabilities = analysis.get('vulnerability_assessment', {}).get('psychological_vulnerabilities', [])
    
    # Construir contenido basado en vulnerabilities
    urgency_phrases = {
        "Cr√≠tica": "URGENTE - ACCI√ìN INMEDIATA REQUERIDA",
        "Alta": "IMPORTANTE - Respuesta necesaria hoy",
        "Media": "Solicitud importante",
        "Baja": "Informaci√≥n requerida"
    }
    
    # Personalizar remitente seg√∫n el tipo
    sender_domains = {
        "Supervisor directo": f"{user_name.split()[0].lower()}supervisor@{company_context.lower().replace(' ', '')}.com",
        "IT/Seguridad": f"seguridad@{company_context.lower().replace(' ', '')}.com",
        "RRHH": f"rrhh@{company_context.lower().replace(' ', '')}.com",
        "Finanzas": f"finanzas@{company_context.lower().replace(' ', '')}.com",
        "Auditor√≠a externa": f"auditoria@consultoriaexterna.com",
        "Proveedor": f"soporte@proveedor{department.lower()}.com"
    }
    
    # Crear contenido ultra-personalizado
    personalized_body = f"""Estimado/a {user_name},

Como {user_data.get('seniority', 'profesional')} de {department} en {company_context}, necesitamos su atenci√≥n inmediata para {scenario.lower()}.

Hemos identificado una situaci√≥n que requiere su intervenci√≥n espec√≠fica debido a su rol en {department}."""
    
    # A√±adir elementos basados en vulnerabilidades
    if vulnerabilities:
        main_vuln = vulnerabilities[0]
        if "autoridad" in main_vuln.get('type', '').lower():
            personalized_body += f"\n\nEsta solicitud viene directamente de la direcci√≥n y es cr√≠tica para el cumplimiento de {department}."
    
    personalized_body += f"""

Detalles espec√≠ficos:
- Departamento afectado: {department}
- Nivel de prioridad: {urgency}
- Tiempo l√≠mite: {"2 horas" if urgency == "Cr√≠tica" else "Fin del d√≠a" if urgency == "Alta" else "Esta semana"}

Por favor, responda inmediatamente con:
1. Confirmaci√≥n de recepci√≥n
2. Informaci√≥n solicitada para {scenario.lower()}
3. Autorizaci√≥n para proceder

Saludos urgentes,
{sender_type}
{company_context}"""
    
    return {
        "content": {
            "subject": f"{urgency_phrases[urgency]} - {scenario} - {department}",
            "sender": sender_domains.get(sender_type, f"admin@{company_context.lower().replace(' ', '')}.com"),
            "sender_name": f"{sender_type} - {company_context}",
            "body": personalized_body,
            "call_to_action": f"Responder con informaci√≥n de {scenario.lower()} antes de {"2 horas" if urgency == "Cr√≠tica" else "fin del d√≠a"}",
            "urgency_indicators": [
                f"Nivel {urgency} de prioridad",
                f"Espec√≠fico para {department}",
                f"Solicitud de {sender_type}"
            ],
            "personalization_hooks": [
                f"Nombre espec√≠fico: {user_name}",
                f"Departamento espec√≠fico: {department}",
                f"Rol espec√≠fico: {user_data.get('seniority', 'profesional')}",
                f"Empresa espec√≠fica: {company_context}"
            ]
        },
        "psychological_analysis": {
            "target_vulnerabilities": [vuln.get('type', 'Vulnerabilidad general') for vuln in vulnerabilities[:3]],
            "persuasion_techniques": [
                {
                    "technique": "Autoridad",
                    "application": f"Remitente presenta como {sender_type} oficial",
                    "effectiveness_reason": f"Personal de {department} responde a autoridad organizacional"
                },
                {
                    "technique": "Urgencia",
                    "application": f"Crear presi√≥n temporal {urgency.lower()}",
                    "effectiveness_reason": f"Nivel {urgency} reduce tiempo de an√°lisis cr√≠tico"
                },
                {
                    "technique": "Personalizaci√≥n espec√≠fica",
                    "application": f"Dirigido espec√≠ficamente a {user_name} de {department}",
                    "effectiveness_reason": "Aumenta percepci√≥n de legitimidad"
                }
            ],
            "emotional_triggers": [
                f"Responsabilidad profesional en {department}",
                f"Presi√≥n temporal {urgency.lower()}",
                "Autoridad organizacional"
            ],
            "authority_elements": [
                f"Remitente {sender_type}",
                f"Proceso oficial de {scenario}",
                f"Referencia a direcci√≥n de {company_context}"
            ],
            "social_proof_elements": [
                f"Proceso est√°ndar en {department}",
                f"Pol√≠tica de {company_context}",
                "Cumplimiento regulatorio"
            ]
        },
        "effectiveness_prediction": {
            "overall_score": min(0.9, 0.6 + (personalization_level * 0.03)),
            "score_breakdown": {
                "personalization": min(0.95, 0.7 + (personalization_level * 0.025)),
                "authority": 0.85 if department in ["Finanzas", "Legal"] else 0.75,
                "urgency": 0.9 if urgency in ["Cr√≠tica", "Alta"] else 0.6,
                "emotional_impact": 0.8
            },
            "success_probability": min(0.85, 0.5 + (personalization_level * 0.035)),
            "reasoning": f"Contenido altamente personalizado para {user_name} de {department}, explotando vulnerabilidades espec√≠ficas identificadas en el perfil psicol√≥gico",
            "potential_red_flags": [
                "Urgencia artificial puede generar sospecha",
                "Remitente externo puede ser verificado",
                f"Personal de {department} puede tener protocolos de verificaci√≥n"
            ]
        },
        "variations": [
            {
                "variation_type": "Menos agresivo",
                "subject": f"Solicitud de {scenario} - {department}",
                "key_differences": "Elimina urgencia artificial, tono m√°s profesional"
            },
            {
                "variation_type": "M√°s t√©cnico",
                "subject": f"Protocolo {scenario} - Validaci√≥n {department}",
                "key_differences": "Lenguaje m√°s t√©cnico, referencias a procedimientos espec√≠ficos"
            }
        ]
    }

def generate_fallback_content(user_data, content_type, scenario, urgency):
    """Generar contenido de fallback b√°sico"""
    return {
        "content": {
            "subject": f"{urgency.upper()}: {scenario} - Acci√≥n Requerida",
            "sender": "admin@empresa.com",
            "sender_name": "Administraci√≥n",
            "body": f"Estimado/a {user_data['user_name']},\n\nDebe completar {scenario.lower()} de manera {urgency.lower()}.\n\nSaludos,\nEquipo de Administraci√≥n",
            "call_to_action": f"Completar {scenario.lower()}",
            "urgency_indicators": ["Solicitud administrativa"],
            "personalization_hooks": [f"Nombre: {user_data['user_name']}"]
        },
        "psychological_analysis": {
            "target_vulnerabilities": ["Autoridad b√°sica"],
            "persuasion_techniques": [{"technique": "Autoridad", "application": "Remitente administrativo", "effectiveness_reason": "B√°sico"}],
            "emotional_triggers": ["Cumplimiento"],
            "authority_elements": ["Administraci√≥n"],
            "social_proof_elements": ["Proceso est√°ndar"]
        },
        "effectiveness_prediction": {
            "overall_score": 0.4,
            "score_breakdown": {"personalization": 0.3, "authority": 0.5, "urgency": 0.4, "emotional_impact": 0.4},
            "success_probability": 0.3,
            "reasoning": "Contenido b√°sico sin personalizaci√≥n espec√≠fica",
            "potential_red_flags": ["Gen√©rico", "Falta de detalles espec√≠ficos"]
        },
        "variations": []
    }

def save_content_result(result, user_data, content_type, scenario):
    """Guardar resultado del contenido generado"""
    content_data = {
        'target_user': user_data['user_name'],
        'content_type': content_type,
        'scenario': scenario,
        'content': result,
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    st.session_state.generated_content.append(content_data)
    st.session_state.current_content = content_data

def display_existing_content():
    """Mostrar contenido existente"""
    if st.session_state.get('generated_content'):
        st.markdown("---")
        st.markdown("### üìß Contenido Generado Anteriormente")
        
        for i, content in enumerate(st.session_state.generated_content[-3:]):
            with st.expander(f"üì© {content['content_type']} para {content['target_user']} - {content['timestamp']}", expanded=False):
                display_content_summary(content)

def display_content_summary(content_data):
    """Mostrar resumen del contenido"""
    content = content_data['content']
    main_content = content.get('content', {})
    
    st.markdown(f"**Asunto:** {main_content.get('subject', 'N/A')}")
    st.markdown(f"**Tipo:** {content_data['content_type']}")
    st.markdown(f"**Escenario:** {content_data['scenario']}")
    
    if 'effectiveness_prediction' in content:
        score = content['effectiveness_prediction'].get('overall_score', 0)
        st.metric("Efectividad Predicha", f"{score:.0%}")

def display_generated_content(content_data):
    """Mostrar contenido generado de manera mejorada"""
    
    content = content_data['content']
    main_content = content.get('content', {})
    analysis = content.get('psychological_analysis', {})
    prediction = content.get('effectiveness_prediction', {})
    
    st.markdown("### üìß Contenido Personalizado Generado")
    
    # Predicci√≥n de efectividad
    overall_score = prediction.get('overall_score', 0)
    success_prob = prediction.get('success_probability', 0)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("Efectividad General", f"{overall_score:.0%}")
    
    with col2:
        st.metric("Probabilidad de √âxito", f"{success_prob:.0%}")
    
    # Desglose de scores
    if prediction.get('score_breakdown'):
        st.markdown("**Desglose de Efectividad:**")
        breakdown = prediction['score_breakdown']
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Personalizaci√≥n", f"{breakdown.get('personalization', 0):.0%}")
        with col2:
            st.metric("Autoridad", f"{breakdown.get('authority', 0):.0%}")
        with col3:
            st.metric("Urgencia", f"{breakdown.get('urgency', 0):.0%}")
        with col4:
            st.metric("Impacto Emocional", f"{breakdown.get('emotional_impact', 0):.0%}")
    
    # Contenido del email/mensaje
    st.markdown("### üì® Contenido del Mensaje")
    
    # Header del contenido
    st.markdown(f"""
    <div class="email-header">
        <strong>De:</strong> {main_content.get('sender_name', 'N/A')} &lt;{main_content.get('sender', 'N/A')}&gt;<br>
        <strong>Para:</strong> {content_data['target_user']}<br>
        <strong>Asunto:</strong> {main_content.get('subject', 'N/A')}<br>
        <strong>Fecha:</strong> {datetime.now().strftime('%d %b %Y, %H:%M')}<br>
        <strong>Tipo:</strong> {content_data['content_type']} | <strong>Escenario:</strong> {content_data['scenario']}
    </div>
    """, unsafe_allow_html=True)
    
    # Cuerpo del mensaje
    body_text = main_content.get('body', 'Sin contenido')
    body_text = body_text.replace('\n', '<br>')
    
    st.markdown(f"""
    <div class="email-container">
        {body_text}
    </div>
    """, unsafe_allow_html=True)
    
    # Call to action
    if main_content.get('call_to_action'):
        st.markdown(f"""
        <div style="background: #1e40af; color: white; padding: 1rem; border-radius: 6px; text-align: center; margin: 1rem 0;">
            <strong>üéØ Acci√≥n Solicitada:</strong> {main_content['call_to_action']}
        </div>
        """, unsafe_allow_html=True)
    
    # An√°lisis detallado
    display_detailed_analysis(analysis, prediction, content)

def display_detailed_analysis(analysis, prediction, content):
    """Mostrar an√°lisis detallado del contenido"""
    
    st.markdown("### üß† An√°lisis Psicol√≥gico Detallado")
    
    # Vulnerabilidades explotadas
    if analysis.get('target_vulnerabilities'):
        st.markdown("**üéØ Vulnerabilidades Explotadas:**")
        for vuln in analysis['target_vulnerabilities']:
            st.markdown(f"‚Ä¢ {vuln}")
    
    # T√©cnicas de persuasi√≥n
    if analysis.get('persuasion_techniques'):
        st.markdown("**üé≠ T√©cnicas de Persuasi√≥n:**")
        for technique in analysis['persuasion_techniques']:
            if isinstance(technique, dict):
                st.markdown(f"""
                <div style="border-left: 4px solid #3b82f6; padding: 0.5rem; margin: 0.5rem 0; background: #eff6ff;">
                    <strong>{technique.get('technique', 'T√©cnica')}</strong><br>
                    <em>Aplicaci√≥n:</em> {technique.get('application', 'No especificada')}<br>
                    <em>Efectividad:</em> {technique.get('effectiveness_reason', 'No especificada')}
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"‚Ä¢ {technique}")
    
    # Elementos espec√≠ficos
    col1, col2 = st.columns(2)
    
    with col1:
        if analysis.get('emotional_triggers'):
            st.markdown("**üí≠ Triggers Emocionales:**")
            for trigger in analysis['emotional_triggers']:
                st.markdown(f"‚Ä¢ {trigger}")
    
    with col2:
        if analysis.get('authority_elements'):
            st.markdown("**üëî Elementos de Autoridad:**")
            for element in analysis['authority_elements']:
                st.markdown(f"‚Ä¢ {element}")
    
    # Ganchos de personalizaci√≥n
    if content.get('content', {}).get('personalization_hooks'):
        st.markdown("**üé£ Ganchos de Personalizaci√≥n:**")
        for hook in content['content']['personalization_hooks']:
            st.markdown(f"‚Ä¢ {hook}")
    
    # An√°lisis de riesgo
    if prediction.get('potential_red_flags'):
        st.markdown("**‚ö†Ô∏è Posibles Se√±ales de Alerta:**")
        for flag in prediction['potential_red_flags']:
            st.markdown(f"‚Ä¢ {flag}")
    
    # Razonamiento
    if prediction.get('reasoning'):
        st.markdown("**üîç An√°lisis de Efectividad:**")
        st.info(prediction['reasoning'])
    
    # Variaciones
    if content.get('variations'):
        st.markdown("### üîÑ Variaciones Alternativas")
        for var in content['variations']:
            st.markdown(f"""
            <div style="border-left: 4px solid #059669; padding: 1rem; margin: 0.5rem 0; background: #f0fdf4;">
                <strong>{var.get('variation_type', 'Variaci√≥n')}</strong><br>
                <em>Asunto:</em> {var.get('subject', 'No especificado')}<br>
                <em>Diferencias:</em> {var.get('key_differences', 'No especificadas')}
            </div>
            """, unsafe_allow_html=True)
    
    # Acciones
    display_content_actions(content_data)

def display_content_actions(content_data):
    """Mostrar acciones para el contenido"""
    st.markdown("### üîß Acciones")
    
    # Crear ID √∫nico para evitar conflictos
    content_id = f"{content_data['target_user']}_{content_data['timestamp'].replace(':', '').replace('-', '').replace(' ', '')}"
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìã Copiar Contenido", key=f"copy_content_{content_id}"):
            # Crear texto para copiar
            main_content = content_data['content'].get('content', {})
            copy_text = f"""
Asunto: {main_content.get('subject', 'N/A')}
De: {main_content.get('sender_name', 'N/A')} <{main_content.get('sender', 'N/A')}>
Para: {content_data['target_user']}

{main_content.get('body', 'Sin contenido')}

---
Acci√≥n solicitada: {main_content.get('call_to_action', 'N/A')}
Efectividad predicha: {content_data['content'].get('effectiveness_prediction', {}).get('overall_score', 0):.0%}
Generado: {content_data['timestamp']}
            """.strip()
            
            st.text_area("Contenido para copiar:", copy_text, height=150, key=f"textarea_{content_id}")
    
    with col2:
        if st.button("üîÑ Regenerar", key=f"regen_{content_id}"):
            st.info("Para regenerar, use el formulario de generaci√≥n nuevamente con diferentes par√°metros.")
    
    with col3:
        # Crear datos para exportar
        export_data = {
            "contenido": content_data,
            "analisis_completo": content_data['content'],
            "timestamp": content_data['timestamp'],
            "efectividad": content_data['content'].get('effectiveness_prediction', {})
        }
        
        st.download_button(
            label="üíæ Exportar An√°lisis",
            data=json.dumps(export_data, indent=2, ensure_ascii=False),
            file_name=f"contenido_analisis_{content_data['target_user']}_{content_data['timestamp'].replace(':', '-').replace(' ', '_')}.json",
            mime="application/json",
            key=f"export_{content_id}"
        )

def load_demo_data():
    """Cargar datos de ejemplo completos para demostraci√≥n"""
    
    # Limpiar datos existentes
    st.session_state.completed_analyses = []
    st.session_state.user_profiles = []
    st.session_state.generated_content = []
    
    # An√°lisis OSINT de ejemplo
    demo_osint = {
        'type': 'An√°lisis OSINT (DEMO)',
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'company': 'TechCorp Demo',
        'summary': {
            "risk_score": 0.78,
            "risk_level": "ALTO",
            "vulnerabilities": [
                {
                    "type": "Exposici√≥n de Empleados en RRSS",
                    "severity": "ALTA",
                    "description": "45% del personal t√©cnico comparte informaci√≥n sobre proyectos en LinkedIn",
                    "evidence": "Perfiles p√∫blicos con detalles de stack tecnol√≥gico",
                    "impact": "Posible ingenier√≠a social dirigida y reconocimiento t√©cnico"
                },
                {
                    "type": "Subdominios Vulnerables",
                    "severity": "MEDIA",
                    "description": "5 subdominios con servicios desactualizados detectados",
                    "evidence": "Escaneo automatizado revel√≥ versiones antiguas",
                    "impact": "Posible explotaci√≥n de vulnerabilidades conocidas"
                },
                {
                    "type": "Informaci√≥n T√©cnica Filtrada",
                    "severity": "MEDIA",
                    "description": "Stack tecnol√≥gico visible en ofertas de trabajo",
                    "evidence": "Ofertas laborales con detalles espec√≠ficos",
                    "impact": "Facilita ataques dirigidos a infraestructura"
                }
            ],
            "attack_vectors": [
                {
                    "vector": "Spear Phishing dirigido",
                    "probability": 0.85,
                    "impact": "Acceso a sistemas cr√≠ticos mediante ingenier√≠a social dirigida",
                    "method": "Emails personalizados usando informaci√≥n p√∫blica de empleados"
                },
                {
                    "vector": "Ingenier√≠a social telef√≥nica",
                    "probability": 0.65,
                    "impact": "Obtenci√≥n de credenciales mediante llamadas dirigidas",
                    "method": "Llamadas haci√©ndose pasar por proveedores conocidos"
                }
            ],
            "employee_exposure": [
                {
                    "employee": "Juan P√©rez - CTO",
                    "risk_level": "ALTO",
                    "exposure_type": "LinkedIn, GitHub, Twitter",
                    "sensitive_info": "Proyectos actuales, stack tecnol√≥gico, estructura del equipo"
                },
                {
                    "employee": "Mar√≠a Gonz√°lez - DevOps Lead",
                    "risk_level": "MEDIO",
                    "exposure_type": "GitHub, conferencias t√©cnicas",
                    "sensitive_info": "Herramientas de infraestructura, procesos de deployment"
                }
            ],
            "technical_findings": [
                {
                    "finding": "Subdominios con servicios expuestos",
                    "risk": "MEDIO",
                    "recommendation": "Auditor√≠a y hardening de servicios p√∫blicos"
                },
                {
                    "finding": "Informaci√≥n de empleados en conferencias",
                    "risk": "BAJO",
                    "recommendation": "Pol√≠ticas de disclosure en eventos p√∫blicos"
                }
            ],
            "industry_specific_risks": [
                "Regulaciones GDPR para datos de clientes",
                "Ataques dirigidos a empresas de tecnolog√≠a",
                "Competencia industrial puede usar informaci√≥n expuesta"
            ],
            "recommendations": [
                {
                    "priority": "ALTA",
                    "category": "Concienciaci√≥n",
                    "action": "Implementar programa de entrenamiento en ingenier√≠a social",
                    "timeline": "30 d√≠as"
                },
                {
                    "priority": "ALTA",
                    "category": "Infraestructura",
                    "action": "Auditar y asegurar todos los subdominios expuestos",
                    "timeline": "15 d√≠as"
                },
                {
                    "priority": "MEDIA",
                    "category": "Pol√≠ticas",
                    "action": "Establecer pol√≠ticas de publicaci√≥n en redes sociales",
                    "timeline": "60 d√≠as"
                }
            ]
        }
    }
    
    st.session_state.completed_analyses.append(demo_osint)
    st.session_state.current_osint = demo_osint['summary']
    
    # Perfil de usuario de ejemplo
    demo_profile = {
        'user_name': 'Ana Garc√≠a (Demo)',
        'department': 'Finanzas',
        'analysis': {
            "psychological_profile": {
                "personality_summary": "Ana Garc√≠a es una profesional de Finanzas orientada a resultados con alta conciencia del cumplimiento. Muestra patrones de comportamiento colaborativo pero con tendencia a confiar en figuras de autoridad.",
                "core_traits": ["Orientada a resultados", "Detallista", "Confiada", "Responsable"],
                "behavioral_patterns": [
                    "Responde r√°pidamente a solicitudes de autoridades",
                    "Sigue procedimientos establecidos meticulosamente",
                    "Comparte informaci√≥n cuando percibe legitimidad oficial"
                ],
                "decision_making_style": "Anal√≠tica pero susceptible a presi√≥n temporal de autoridades",
                "stress_responses": [
                    "Busca aprobaci√≥n de superiores cuando hay presi√≥n",
                    "Acelera decisiones cuando se menciona cumplimiento regulatorio"
                ],
                "technology_relationship": "C√≥moda con herramientas financieras, cautelosa con nuevas tecnolog√≠as",
                "social_behavior": "Profesional y reservada, pero colaborativa en temas de trabajo"
            },
            "vulnerability_assessment": {
                "overall_risk_score": 0.72,
                "risk_factors": [
                    {
                        "factor": "Autoridad percibida",
                        "score": 0.85,
                        "description": "Alta susceptibilidad a figuras de autoridad financiera y regulatoria",
                        "mitigation": "Entrenamiento en verificaci√≥n de identidad de autoridades"
                    },
                    {
                        "factor": "Presi√≥n de cumplimiento",
                        "score": 0.78,
                        "description": "Respuesta acelerada ante menciones de auditor√≠as o compliance",
                        "mitigation": "Protocolos espec√≠ficos para solicitudes de auditor√≠a"
                    }
                ],
                "psychological_vulnerabilities": [
                    {
                        "type": "Autoridad regulatoria",
                        "severity": "ALTA",
                        "description": "Alta susceptibilidad a figuras que se presentan como autoridades fiscales o regulatorias",
                        "triggers": ["Auditor√≠as", "Compliance", "Procesos fiscales", "Reportes financieros"],
                        "exploitation_method": "Emails simulando comunicaciones oficiales de entidades regulatorias"
                    },
                    {
                        "type": "Presi√≥n temporal en finanzas",
                        "severity": "MEDIA",
                        "description": "Vulnerabilidad a t√°cticas que crean urgencia en procesos financieros",
                        "triggers": ["Deadlines fiscales", "Cierres contables", "Reportes urgentes"],
                        "exploitation_method": "Crear escenarios de urgencia falsa relacionados con procesos financieros"
                    }
                ]
            },
            "attack_simulation": {
                "most_effective_vectors": [
                    {
                        "technique": "Phishing de autoridad fiscal",
                        "effectiveness_score": 0.82,
                        "approach": "Emails simulando auditor√≠as urgentes de autoridades fiscales con documentaci√≥n aparentemente oficial",
                        "psychological_basis": "Miedo a problemas legales/fiscales combinado con respeto a autoridad",
                        "execution_example": "Email de 'Hacienda' solicitando verificaci√≥n urgente de datos fiscales de la empresa"
                    },
                    {
                        "technique": "Ingenier√≠a social de compliance",
                        "effectiveness_score": 0.75,
                        "approach": "Llamadas telef√≥nicas haci√©ndose pasar por auditores externos solicitando informaci√≥n",
                        "psychological_basis": "Responsabilidad profesional y temor a incumplimiento",
                        "execution_example": "Llamada de 'auditor externo' solicitando confirmaci√≥n de datos para proceso de compliance"
                    }
                ],
                "social_engineering_angles": [
                    {
                        "angle": "Autoridad fiscal/regulatoria",
                        "success_probability": 0.8,
                        "description": "Aprovechamiento de respeto natural a autoridades financieras y fiscales"
                    },
                    {
                        "angle": "Urgencia en procesos contables",
                        "success_probability": 0.65,
                        "description": "Creaci√≥n de escenarios de urgencia en procesos familiares de finanzas"
                    }
                ]
            },
            "personalized_training": {
                "priority_areas": [
                    {
                        "area": "Verificaci√≥n de autoridad fiscal",
                        "priority": "ALTA",
                        "reason": "Alta susceptibilidad a figuras de autoridad financiera identificada en el perfil",
                        "training_approach": "Simulacros espec√≠ficos con verificaci√≥n de identidad de autoridades fiscales"
                    },
                    {
                        "area": "Manejo de presi√≥n temporal en finanzas",
                        "priority": "MEDIA",
                        "reason": "Tendencia a acelerar decisiones bajo presi√≥n de compliance",
                        "training_approach": "Protocolos de pausa y verificaci√≥n en situaciones urgentes"
                    }
                ],
                "recommended_simulations": [
                    {
                        "scenario": "Phishing de auditor√≠a fiscal urgente",
                        "frequency": "Mensual",
                        "difficulty": "Alta",
                        "focus": "Verificaci√≥n de autoridades antes de proporcionar informaci√≥n"
                    },
                    {
                        "scenario": "Llamada de auditor externo falso",
                        "frequency": "Bimensual",
                        "difficulty": "Media",
                        "focus": "Protocolos de verificaci√≥n telef√≥nica"
                    }
                ]
            }
        },
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    st.session_state.user_profiles.append(demo_profile)
    st.session_state.current_profile = demo_profile
    
    # Contenido generado de ejemplo
    demo_content = {
        'target_user': 'Ana Garc√≠a (Demo)',
        'content_type': 'Email de phishing',
        'scenario': 'Auditor√≠a fiscal',
        'content': {
            "content": {
                "subject": "URGENTE: Verificaci√≥n Fiscal Requerida - Finanzas",
                "sender": "verificacion@hacienda-digital.gob.mx",
                "sender_name": "Servicio de Administraci√≥n Tributaria",
                "body": """Estimada Ana Garc√≠a,

Como responsable del √°rea de Finanzas de TechCorp Demo, hemos identificado una discrepancia en su declaraci√≥n fiscal del √∫ltimo trimestre que requiere verificaci√≥n inmediata.

De acuerdo con nuestros registros, su empresa presenta irregularidades en:
- Declaraci√≥n de IVA del Q3 2024
- Retenciones de n√≥mina no reportadas
- Deducciones no comprobadas por $125,000 MXN

Por disposiciones fiscales vigentes, debe proporcionar la siguiente documentaci√≥n ANTES DE LAS 18:00 HRS DEL D√çA DE HOY:

1. Estados financieros actualizados
2. Comprobantes de retenciones del √∫ltimo trimestre  
3. Confirmaci√≥n de datos bancarios corporativos
4. Autorizaci√≥n para revisi√≥n de cuentas

El incumplimiento de este requerimiento puede resultar en:
‚ùå Multas por $500,000 - $2,000,000 MXN
‚ùå Congelamiento de cuentas bancarias corporativas
‚ùå Proceso administrativo de ejecuci√≥n

Para evitar sanciones, complete inmediatamente el formulario de verificaci√≥n en el enlace oficial:
üîó [VERIFICAR DATOS FISCALES - SISTEMA SAT]

N√∫mero de expediente: SAT-2024-TechCorp-7845
Fecha l√≠mite: HOY 18:00 hrs
Responsable: Ana Garc√≠a - √Årea Finanzas

Saludos oficiales,
Lic. Roberto Mart√≠nez S√°nchez
Subdirector de Fiscalizaci√≥n
Servicio de Administraci√≥n Tributaria
Tel: 55-4738-2100 ext. 2847""",
                "call_to_action": "Completar verificaci√≥n fiscal antes de las 18:00 hrs del d√≠a de hoy",
                "urgency_indicators": [
                    "Fecha l√≠mite espec√≠fica (18:00 hrs)",
                    "Amenaza de multas econ√≥micas concretas",
                    "N√∫mero de expediente oficial",
                    "Consecuencias graves mencionadas"
                ],
                "personalization_hooks": [
                    "Nombre espec√≠fico: Ana Garc√≠a",
                    "√Årea espec√≠fica: Finanzas", 
                    "Empresa espec√≠fica: TechCorp Demo",
                    "Montos espec√≠ficos de irregularidades",
                    "Responsabilidad directa mencionada"
                ]
            },
            "psychological_analysis": {
                "target_vulnerabilities": [
                    "Autoridad regulatoria",
                    "Presi√≥n temporal en finanzas",
                    "Responsabilidad profesional"
                ],
                "persuasion_techniques": [
                    {
                        "technique": "Autoridad gubernamental",
                        "application": "Remitente presenta como Servicio de Administraci√≥n Tributaria oficial",
                        "effectiveness_reason": "Ana responde autom√°ticamente a autoridades fiscales por su rol en Finanzas"
                    },
                    {
                        "technique": "Miedo espec√≠fico a sanciones",
                        "application": "Menciona multas concretas de $500K-$2M y congelamiento de cuentas",
                        "effectiveness_reason": "Como responsable de Finanzas, estos escenarios son su peor pesadilla profesional"
                    },
                    {
                        "technique": "Urgencia temporal cr√≠tica",
                        "application": "Deadline espec√≠fico del mismo d√≠a a las 18:00 hrs",
                        "effectiveness_reason": "Presi√≥n temporal reduce tiempo de an√°lisis cr√≠tico en procesos fiscales"
                    },
                    {
                        "technique": "Personalizaci√≥n detallada",
                        "application": "Incluye nombre, √°rea, empresa y montos espec√≠ficos de irregularidades",
                        "effectiveness_reason": "Alto nivel de personalizaci√≥n aumenta percepci√≥n de legitimidad"
                    }
                ],
                "emotional_triggers": [
                    "Miedo a sanciones econ√≥micas devastadoras",
                    "P√°nico por responsabilidad profesional",
                    "Estr√©s por deadline inmediato",
                    "Temor a consecuencias legales para la empresa"
                ],
                "authority_elements": [
                    "Logo y nombre oficial del SAT",
                    "N√∫mero de expediente oficial",
                    "Nombre y cargo espec√≠fico del funcionario",
                    "Tel√©fono de contacto oficial",
                    "Lenguaje formal gubernamental"
                ],
                "social_proof_elements": [
                    "Procedimiento aparentemente est√°ndar",
                    "Referencias a disposiciones fiscales",
                    "Proceso administrativo formal",
                    "Sistema oficial de verificaci√≥n"
                ]
            },
            "effectiveness_prediction": {
                "overall_score": 0.88,
                "score_breakdown": {
                    "personalization": 0.95,
                    "authority": 0.92,
                    "urgency": 0.85,
                    "emotional_impact": 0.88
                },
                "success_probability": 0.82,
                "reasoning": "Contenido extremadamente personalizado que explota las vulnerabilidades principales identificadas en el perfil de Ana Garc√≠a: autoridad fiscal, presi√≥n temporal y responsabilidad profesional. La combinaci√≥n de amenazas econ√≥micas espec√≠ficas, deadline cr√≠tico y personalizaci√≥n detallada crea un escenario de alta efectividad.",
                "potential_red_flags": [
                    "Email externo solicitando datos sensibles",
                    "Urgencia artificial puede generar sospecha",
                    "Solicitud de datos bancarios por email",
                    "Falta de proceso oficial de verificaci√≥n presencial"
                ]
            },
            "variations": [
                {
                    "variation_type": "Menos agresivo",
                    "subject": "Notificaci√≥n de Revisi√≥n Fiscal - TechCorp Demo",
                    "key_differences": "Elimina urgencia artificial, reduce amenazas, tono m√°s informativo"
                },
                {
                    "variation_type": "M√°s t√©cnico",
                    "subject": "Requerimiento Art. 42 CFF - Verificaci√≥n Documental",
                    "key_differences": "Lenguaje m√°s t√©cnico fiscal, referencias espec√≠ficas a art√≠culos legales"
                }
            ]
        },
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    st.session_state.generated_content.append(demo_content)
    st.session_state.current_content = demo_content

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        st.error(f"Error en la aplicaci√≥n: {str(e)}")
        st.info("Intente recargar la p√°gina o use el modo demo.")
